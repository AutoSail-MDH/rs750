#!/usr/bin/env python

import math
import rospy
import tf

from dynamic_reconfigure.server import Server
from rs750_controller.cfg import CourseControllerConfig

from geometry_msgs.msg import Vector3Stamped
from std_msgs.msg import Float64



class CourseController(object):
    ''' Simple course controller    

    
    /imu/rpy (geometry_msgs/Vector3Stamped)
    /imu/rpy/filtered (geometry_msgs/Vector3Stamped)
    /imu/rpy/raw (geometry_msgs/Vector3Stamped)


    '''

    def __init__(self):
        # Parameters
        self._kp = 10.
        self._ki = 10.
        self._kd = 10.

        # Subscribers
        # self._app_wind_msg = Vector3Stamped()
        # self._app_wind_sub = rospy.Subscriber('/wind/apparent', Vector3Stamped, self._app_wind_cb)
        self._rpy_msg = Vector3Stamped()
        self._rpy_sub = rospy.Subscriber('/imu/rpy/filtered', Vector3Stamped, self._rpy_cb)

        # Publishers
        # self._main_sail_cmd_msg = Float64()
        # self._main_sail_pub = rospy.Publisher('main_sail_position/command', Float64, queue_size=10)

        # Dynamic reconfiguration
        self._dynamic_reconfig_srv = Server(CourseControllerConfig, self._dynamic_reconfig_cb)

    def update(self, event):
        ''' Callback for the control loop.
        
        Parameters
        ----------
        event : rospy.Timer
            A rospy.Timer event.
        '''

        time = event.current_real

        # Logging
        rospy.loginfo('rpy: ({:.2f}, {:.2f}, {:.2f})'.format(
            self._rpy_msg.vector.x, self._rpy_msg.vector.y, self._rpy_msg.vector.z))

        # Publish the position commands 
        # self._main_sail_pub.publish(self._main_sail_cmd_msg)

    def _rpy_cb(self, msg):
        '''Capture the current state of the rpy angles'''

        self._rpy_msg = msg

    def _dynamic_reconfig_cb(self, config, level):
        '''Dynamic reconfigure callback'''

        # Logging
        rospy.logdebug('kp: {kp}'.format(**config))
        rospy.logdebug('ki: {ki}'.format(**config))
        rospy.logdebug('kd: {kd}'.format(**config))

        # Update parameters
        self._kp = config.kp
        self._ki = config.ki
        self._kd = config.kd

        return config

def main():
    '''ROS node for course controller'''

    rospy.init_node('course_controller')
    rospy.loginfo('Starting course controller')

    # Create the controller
    controller = CourseController()

    # Start the control loop
    control_frequency = 10.0
    if rospy.has_param('~control_frequency'):
        control_frequency = rospy.get_param('~control_frequency')

    rospy.loginfo('Starting control loop at {} Hz'.format(control_frequency))
    control_timer = rospy.Timer(
        rospy.Duration(1.0 / control_frequency),
        controller.update)

    # Spin
    rospy.spin()

if __name__ == '__main__':
    main()
